#BELOW IS COMPLETELY GENERATED BY CHATGPT WITH THE FOLLOWING PROMPT
# "Code a 3d minesweeper game with pure python"
#But it doesn't work LOL

import pygame
import random
import sys

# Constants
WIDTH, HEIGHT = 600, 400
GRID_SIZE = 10
CELL_SIZE = WIDTH // GRID_SIZE
MINE_COUNT = 10

# Colors
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
RED = (255, 0, 0)
BLACK = (0, 0, 0)

# Initialize pygame
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Minesweeper")

# Load fonts
font = pygame.font.Font(None, 36)

class Cell:
    def __init__(self):
        self.is_mine = False
        self.is_revealed = False
        self.adjacent_mines = 0

    def reveal(self):
        self.is_revealed = True

class Minesweeper:
    def __init__(self):
        self.grid = [[Cell() for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
        self.place_mines()
        self.calculate_adjacent_mines()

    def place_mines(self):
        count = 0
        while count < MINE_COUNT:
            x = random.randint(0, GRID_SIZE - 1)
            y = random.randint(0, GRID_SIZE - 1)
            if not self.grid[y][x].is_mine:
                self.grid[y][x].is_mine = True
                count += 1

    def calculate_adjacent_mines(self):
        for y in range(GRID_SIZE):
            for x in range(GRID_SIZE):
                if self.grid[y][x].is_mine:
                    continue
                for dy in [-1, 0, 1]:
                    for dx in [-1, 0, 1]:
                        if (dy == 0 and dx == 0) or \
                                y + dy < 0 or y + dy >= GRID_SIZE or \
                                x + dx < 0 or x + dx >= GRID_SIZE:
                            continue
                        if self.grid[y + dy][x + dx].is_mine:
                            self.grid[y][x].adjacent_mines += 1

    def reveal_cell(self, x, y):
        if 0 <= x < GRID_SIZE and 0 <= y < GRID_SIZE:
            cell = self.grid[y][x]
            if not cell.is_revealed:
                cell.reveal()
                if cell.adjacent_mines == 0 and not cell.is_mine:
                    # Reveal adjacent cells if no adjacent mines
                    for dy in [-1, 0, 1]:
                        for dx in [-1, 0, 1]:
                            self.reveal_cell(x + dx, y + dy)

    def draw(self, screen):
        for y in range(GRID_SIZE):
            for x in range(GRID_SIZE):
                cell = self.grid[y][x]
                rect = pygame.Rect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
                if cell.is_revealed:
                    if cell.is_mine:
                        pygame.draw.rect(screen, RED, rect)
                    else:
                        pygame.draw.rect(screen, WHITE, rect)
                        if cell.adjacent_mines > 0:
                            text = font.render(str(cell.adjacent_mines), True, BLACK)
                            screen.blit(text, (x * CELL_SIZE + CELL_SIZE // 4, y * CELL_SIZE + CELL_SIZE // 4))
                else:
                    pygame.draw.rect(screen, GRAY, rect)

def main():
    game = Minesweeper()
    while True:
        screen.fill(BLACK)
        game.draw(screen)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                game.reveal_cell(x // CELL_SIZE, y // CELL_SIZE)

        pygame.display.flip()

if __name__ == "__main__":
    main()

